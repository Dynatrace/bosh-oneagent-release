# ==================================================
# dynatrace installation script
# ==================================================
# configuration section
# ==================================================

$ProgressPreference = "SilentlyContinue"

$cfgDownloadUrl = "<%= properties.dynatrace.downloadurl %>"
$cfgProxy = "<%= properties.dynatrace.proxy %>"
$cfgEnvironmentId = "<%= properties.dynatrace.environmentid %>"
$cfgApiToken = "<%= properties.dynatrace.apitoken %>"
$cfgApiUrl = "<%= properties.dynatrace.apiurl %>"
$cfgSslMode = "<%= properties.dynatrace.sslmode %>"
$cfgHostGroup = "<%= properties.dynatrace.hostgroup %>"
$cfgHostTags = "<%= properties.dynatrace.hosttags %>"
$cfgHostProps = "<%= properties.dynatrace.hostprops %> BOSHReleaseVersion=<%= spec.release.version %>"
$cfgInfraOnly = "<%= properties.dynatrace.infraonly %>"

$oneagentwatchdogProcessName = "oneagentwatchdog"
$tempDir = "C:\var\vcap\data\dt_tmp"
$installerFile = "$tempDir\Dynatrace-OneAgent-Windows.exe"
$agentExpandPath = "$tempDir\dynatrace-oneagent-windows"
$logDir = "C:\var\vcap\sys\log\dynatrace-oneagent-windows"
$logFile = "$logDir\dynatrace-install.log"
$configDir = "$env:ProgramData\dynatrace\oneagent\agent\config"

# ==================================================
# function section
# ==================================================

function installLog($level, $content) {
	$line = "{0} {1} {2}" -f (Get-Date), $level, $content

	Write-Host $line
	Write-Output $line | Out-File -Encoding utf8 -Append $logFile
}

installLog "INFO" "Dynatrace BOSH Add-on version <%= spec.release.version %>"

function updateTrustedSites {
	# This adds following domains to trusted sites:
	# * dynatrace.com
	# * dynatrace-managed.com
	# * the domain of an optional custom download URL, if provided

	$addDomains = @()
	$addDomains = "dynatrace.com", "dynatrace-managed.com"

	if ($cfgDownloadUrl -ne "") {
		$splitOptions = [System.StringSplitOptions]::RemoveEmptyEntries
		$customDownloadUrl = $cfgDownloadUrl.Split("//", $splitOptions)[1].Split("/", $splitOptions)[0]
		If( $customDownloadUrl -match "[a-zA-Z0-9]") {
			$addDomains += "$customDownloadUrl"
		}
	}
	
	$registryPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains"
	$DWord = 2
	
	foreach ($domain in $addDomains) {
		if (-Not (Test-Path "$registryPath\$domain")) {
			New-Item -Path "$registryPath" -ItemType File -Name "$domain" | Out-Null
			Set-ItemProperty -Path $registryPath -Name "https" -Value $DWord | Out-Null
			installLog "INFO" "Added $domain to trusted sites"
		} else {
			installLog "INFO" "Registry key for $domain already exists"
		}
	}
}

function setupSslAcceptAll {
	$codeProvider = New-Object Microsoft.CSharp.CSharpCodeProvider
	$codeCompilerParams = New-Object System.CodeDom.Compiler.CompilerParameters
	$codeCompilerParams.GenerateExecutable = $false
	$codeCompilerParams.GenerateInMemory = $true
	$codeCompilerParams.IncludeDebugInformation = $false
	$codeCompilerParams.ReferencedAssemblies.Add("System.DLL") > $null
	$trustAllSource=@'
		namespace Local.ToolkitExtensions.Net.CertificatePolicy {
			public class TrustAll : System.Net.ICertificatePolicy {
				public TrustAll() {}
				public bool CheckValidationResult(System.Net.ServicePoint sp,System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Net.WebRequest req, int problem) {
					return true;
				}
			}
		}
'@

	$trustAllResults = $codeProvider.CompileAssemblyFromSource($codeCompilerParams, $trustAllSource)
	$truxtAllAssembly=$trustAllResults.CompiledAssembly

	$trustAll = $truxtAllAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")

	[System.Net.ServicePointManager]::CertificatePolicy = $trustAll
}

function downloadAgent() {
	$userAgent = "bosh/<%= spec.release.version %>"
	$retryTimeout = 0
	$downloadErrors = 0

	if ($cfgSslMode -eq "all") {
		installLog "INFO" "Accepting all ssl certificates"
		setupSslAcceptAll
	}

	while($downloadErrors -lt 3) {
		Start-Sleep -s $retryTimeout

		Try {
			installLog "INFO" "Downloading Dynatrace agent from $cfgDownloadUrl to $installerFile"
			
			if($cfgProxy -ne "") {
				installLog "INFO" "Proxy settings found, setting system proxy to $cfgProxy"
				Invoke-WebRequest $cfgDownloadUrl -Outfile $installerFile -UserAgent $userAgent -Proxy $cfgProxy
			} else {
				Invoke-WebRequest $cfgDownloadUrl -Outfile $installerFile -UserAgent $userAgent
			}
			
			Break
		} Catch {
			installLog "ERROR" "Failed to download: $($_.Exception.Message)"

			$downloadErrors = $downloadErrors + 1
			$retryTimeout = $retryTimeout + 5
			installLog "ERROR" "Dynatrace agent download failed, retrying in $retryTimeout seconds"
		}
	}

	if ($downloadErrors -eq 3) {
		installLog "ERROR" "Downloading agent installer failed!"
		Exit 1
	}
}

function setHostTags {
	if ($cfgHostTags -ne "") {
		$hostTagsFile = "${configDir}\hostautotag.conf"

		installLog "INFO" "Setting host tags to '$cfgHostTags' at $hostTagsFile"
		Set-Content -Path $hostTagsFile -Value $cfgHostTags
	}
}

function setHostProps {
	$hostPropsFile = "${configDir}\hostcustomproperties.conf"

	installLog "INFO" "Setting host properties to '$cfgHostProps' at $hostPropsFile"
	Set-Content -Path $hostPropsFile -Value $cfgHostProps
}

function removeItem($path) {
	try {
		installLog "INFO" "Cleaning $path"
		if (Test-Path -Path $path) {
			try {
				Remove-Item -Recurse $path -Force
			} catch {
			}
		}
	} catch {
		installLog "ERROR" "Unable to remove directory: $path"
	}
}

function cleanUp() {
	removeItem $installerFile
}

# ==================================================
# main section
# ==================================================

installLog "INFO" "Installing Dynatrace OneAgent..."

cleanup

if (!(Test-Path $tempDir)) {
	New-Item -ItemType Directory -Path $tempDir
}

if (!(Test-Path $configDir)) {
	New-Item -ItemType Directory -Path $configDir
}

setHostTags
setHostProps

# download mode setup
if ($cfgDownloadUrl.length -eq 0){
	if ($cfgEnvironmentId.length -eq 0) {
		installLog "ERROR" "Invalid configuration: Please provide environment ID!"
		exit 1
	} elseif ($cfgApiToken.Length -eq 0) {
		installLog "ERROR" "Invalid configuration: Please provide API token!"
	}

	if ($cfgApiUrl.length -eq 0)  {
		$cfgApiUrl = "http://{0}.live.dynatrace.com/api" -f $cfgEnvironmentId
	}

	$cfgDownloadUrl = "{0}/v1/deployment/installer/agent/windows/default/latest?Api-Token={1}" -f $cfgApiUrl, $cfgApiToken
}

updateTrustedSites
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12'

# do we really want to log these?
installLog "INFO" "Using API URL $cfgApiUrl"

downloadAgent

#run the installer
try {
	$commandArguments = "/quiet"
	if ($cfgHostGroup -ne "") {
		installLog "INFO" "Setting host group to $cfgHostGroup"
		$commandArguments += " HOST_GROUP=$cfgHostGroup"
	}

	if ($cfgInfraOnly -eq "1") {
		installLog "INFO" "Enabling Infra-Only mode"
		$commandArguments += " INFRA_ONLY=$cfgInfraOnly"
	}

	# Arguments passed to install.bat will be appended to the agent installation command.
	$process = Start-Process -FilePath $installerFile -ArgumentList $commandArguments -Wait -PassThru
	$process.WaitForExit()
	if ($process.ExitCode -ne 0) {
		throw "Installation process exited with code $($process.ExitCode)"
	}
} catch {
	installLog "ERROR" "Failed to run OneAgent installer: $installerFile - Exception: $($_.Exception.Message)"
	exit 1
}

installLog "INFO" "Installation done"

# Note: The installer automatically started the OneAgent after installation.

$watchdogWaitCounter = 0

do {
	if ($watchdogWaitCounter -gt 300) {
		installLog "ERROR" "{0} did not start in time!" -f $oneagentwatchdogProcessName
		exit 1
	}

	installLog "INFO" "Waiting for $oneagentwatchdogProcessName to be started by the installer..."
	Start-Sleep -s 5
	$output = Get-Process | Where-Object {$_.ProcessName -match "$oneagentwatchdogProcessName"}
	$watchdogWaitCounter++
} while ($output.length -eq 0)

installLog "INFO" "Process $oneagentwatchdogProcessName has started"

exit 0
